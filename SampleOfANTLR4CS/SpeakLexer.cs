//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Speak.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class SpeakLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SAYS=1, WORD=2, WHITESPACE=3, NEWLINE=4;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"A", "S", "Y", "LOWERCASE", "UPPERCASE", "SAYS", "WORD", "WHITESPACE", 
		"NEWLINE"
	};


	public SpeakLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "SAYS", "WORD", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Speak.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static SpeakLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x6");
		sb.Append(":\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\b\x3\b\x6\b\'\n\b\r\b\xE\b(\x3\t\x6\t,\n\t\r\t\xE\t-\x3");
		sb.Append("\t\x3\t\x3\n\x5\n\x33\n\n\x3\n\x3\n\x6\n\x37\n\n\r\n\xE\n\x38");
		sb.Append("\x2\x2\v\x3\x2\x5\x2\a\x2\t\x2\v\x2\r\x3\xF\x4\x11\x5\x13\x6");
		sb.Append("\x3\x2\b\x4\x2\x43\x43\x63\x63\x4\x2UUuu\x4\x2[[{{\x3\x2\x63");
		sb.Append("|\x3\x2\x43\\\x4\x2\v\v\"\":\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2");
		sb.Append("\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x3\x15\x3\x2\x2\x2");
		sb.Append("\x5\x17\x3\x2\x2\x2\a\x19\x3\x2\x2\x2\t\x1B\x3\x2\x2\x2\v\x1D");
		sb.Append("\x3\x2\x2\x2\r\x1F\x3\x2\x2\x2\xF&\x3\x2\x2\x2\x11+\x3\x2\x2");
		sb.Append("\x2\x13\x36\x3\x2\x2\x2\x15\x16\t\x2\x2\x2\x16\x4\x3\x2\x2\x2");
		sb.Append("\x17\x18\t\x3\x2\x2\x18\x6\x3\x2\x2\x2\x19\x1A\t\x4\x2\x2\x1A");
		sb.Append("\b\x3\x2\x2\x2\x1B\x1C\t\x5\x2\x2\x1C\n\x3\x2\x2\x2\x1D\x1E");
		sb.Append("\t\x6\x2\x2\x1E\f\x3\x2\x2\x2\x1F \x5\x5\x3\x2 !\x5\x3\x2\x2");
		sb.Append("!\"\x5\a\x4\x2\"#\x5\x5\x3\x2#\xE\x3\x2\x2\x2$\'\x5\t\x5\x2");
		sb.Append("%\'\x5\v\x6\x2&$\x3\x2\x2\x2&%\x3\x2\x2\x2\'(\x3\x2\x2\x2(&");
		sb.Append("\x3\x2\x2\x2()\x3\x2\x2\x2)\x10\x3\x2\x2\x2*,\t\a\x2\x2+*\x3");
		sb.Append("\x2\x2\x2,-\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2./\x3\x2");
		sb.Append("\x2\x2/\x30\b\t\x2\x2\x30\x12\x3\x2\x2\x2\x31\x33\a\xF\x2\x2");
		sb.Append("\x32\x31\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2");
		sb.Append("\x34\x37\a\f\x2\x2\x35\x37\a\xF\x2\x2\x36\x32\x3\x2\x2\x2\x36");
		sb.Append("\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38");
		sb.Append("\x39\x3\x2\x2\x2\x39\x14\x3\x2\x2\x2\t\x2&(-\x32\x36\x38\x3");
		sb.Append("\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
